#!/bin/bash

# Set some colors for output messages
OK="$(tput setaf 2)[OK]$(tput sgr0)"
ERROR="$(tput setaf 1)[ERROR]$(tput sgr0)"
NOTE="$(tput setaf 3)[NOTE]$(tput sgr0)"
WARN="$(tput setaf 166)[WARN]$(tput sgr0)"
CAT="$(tput setaf 6)[ACTION]$(tput sgr0)"
GREEN=$(tput setaf 2)
ORANGE=$(tput setaf 166)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

# Set the name of the log file to include the current date and time
LOG="install_$(date +%Y%m%d%H%M).log"

#clear screen
clear

WELCOME_MESSAGE="Welcome to the Arch Linux - Hyprland installer!"

# Print welcome message centered
printf "${GREEN}%*s${RESET}\n" $(((${#WELCOME_MESSAGE}+$(tput cols))/2)) "$WELCOME_MESSAGE"
sleep 2

# Print backup warning message
printf "${ORANGE}$(tput smso)PLEASE BACKUP YOUR FILES BEFORE PROCEEDING!$(tput rmso)\n"
printf "${YELLOW} Although I will attempt to backup your files!\n"
sleep 2

# Print password warning message
printf "\n${YELLOW}Some commands require you to enter your password in order to execute.\n"
printf "If you are worried about entering your password, you can cancel the script now with CTRL+C and review the contents of this script.${RESET}\n"
sleep 2
printf "\n"
printf "\n"
# proceed
read -n1 -rep "${CAT} Shall we proceed with installation (y/n) " PROCEED
    echo
if [[ $PROCEED =~ ^[Yy]$ ]]; then
    printf "\n%s  Alright.....LETS BEGIN!.\n" "${OK}"
else
    printf "\n%s  NO changes made to your system. Goodbye.!!!\n" "${NOTE}"
    exit
fi

#clear screen
clear

# Check for AUR helper and install if not found
ISAUR=$(command -v yay || command -v paru)
if [ -n "$ISAUR" ]; then
    printf "\n%s - AUR helper was located, moving on.\n" "${OK}"
else 
    printf "\n%s - AUR helper was NOT located\n" "$WARN"

    read -rp "${CAT} Which AUR helper do you want to use, yay or paru? Enter 'y' or 'p': " choice 
    case "$choice" in
        y|Y)
            printf "\n%s - Installing yay from AUR\n" "${NOTE}"
            git clone https://aur.archlinux.org/yay-bin.git || { printf "%s - Failed to clone yay from AUR\n" "${ERROR}"; exit 1; }
            cd yay-bin || { printf "%s - Failed to enter yay-bin directory\n" "${ERROR}"; exit 1; }
            makepkg -si --noconfirm 2>&1 | tee -a $LOG || { printf "%s - Failed to install yay from AUR\n" "${ERROR}"; exit 1; }
            cd ..
            ;;
        p|P)
            printf "\n%s - Installing paru from AUR\n" "${NOTE}"
            git clone https://aur.archlinux.org/paru-bin.git || { printf "%s - Failed to clone paru from AUR\n" "${ERROR}"; exit 1; }
            cd paru-bin || { printf "%s - Failed to enter paru-bin directory\n" "${ERROR}"; exit 1; }
            makepkg -si --noconfirm 2>&1 | tee -a $LOG || { printf "%s - Failed to install paru from AUR\n" "${ERROR}"; exit 1; }
            cd ..
            ;;
        *)
            printf "%s - Invalid choice. Please enter 'y' or 'p'\n" "${ERROR}"
            exit 1
            ;;
    esac
fi

#clear screen
clear

# Update system before proceeding
printf "\n%s - Performing a full system update.... \n" "${NOTE}"
ISAUR=$(command -v yay || command -v paru)
$ISAUR -Syu --noconfirm 2>&1 | tee -a $LOG || { printf "%s - Failed to update system\n" "${ERROR}"; exit 1; }

# Set the script to exit on error
set -e

# Function for installing packages
install_package() {
     # checking if package is already installed
    if $ISAUR -Q $1 &>> /dev/null ; then
        echo -e "${OK} - $1 is already installed."
    else
        # package not installed
        echo -e "${NOTE} - Now installing $1 ..."
        $ISAUR -S --noconfirm $1 2>&1 | tee -a $LOG
        # making sure package installed
        if $ISAUR -Q $1 &>> /dev/null ; then
            echo -e "\e[1A\e[K${OK} - $1 was installed."
        else
            # something is missing, exitting to review log
            echo -e "\e[1A\e[K${ERROR} - $1 install had failed, please check the install.log"
            exit
        fi
    fi
}

# Function to print error messages
print_error() {
    printf " %s%s\n" "${ERROR}" "$1" "$NC" >&2
}

# Function to print success messages
print_success() {
    printf "%s%s%s\n" "${OK}" "$1" "$NC"
}

# Exit immediately if a command exits with a non-zero status.
set -e 
# Hyprland Main installation part
# Detection if Nvidia GPU is present
if ! lspci -k | grep -A 2 -E "(VGA|3D)" | grep -iq nvidia; then
    printf "%s - No NVIDIA GPU detected in your system. Installing Hyprland without Nvidia support...\n" "${NOTE}"
    for HYP in hyprland; do
        install_package "$HYP" 2>&1 | tee -a $LOG
    done
else
    read -n1 -rep "${CAT} NVIDIA-GPU Detected in your system. Would you like to install the Nvidia Hyprland? (y/n) " NVIDIA
    echo
    if [[ $NVIDIA =~ ^[Yy]$ ]]; then
        # Install Nvidia Hyprland
        printf "%s - Installing Nvidia Hyprland...\n" "${NOTE}"
        for NHYP in hyprland-nvidia-git; do
            install_package "$NHYP" 2>&1 | tee -a $LOG
        done
        printf "%s - Installing additional nvidia packages...\n" "${NOTE}"
        cat /usr/lib/modules/*/pkgbase | while read krnl; do
            for NVIDIA in "${krnl}-headers" nvidia-dkms nvidia-settings nvidia-utils libva nvidia-vaapi-driver-git; do
                install_package "$NVIDIA" 2>&1 | tee -a $LOG
            done
        done
        # additional nvidia steps
        sudo sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
        sudo mkinitcpio -P
        printf "%s - Adding options to nvidia.conf...\n" "${NOTE}"
        echo -e "options nvidia-drm modeset=1" | sudo tee -a /etc/modprobe.d/nvidia.conf 2>&1 | tee -a $LOG
    else
        # Install non-Nvidia Hyprland
        for HYP2 in hyprland; do
            install_package "$HYP2" 2>&1 | tee -a $LOG
        done
    fi
fi

    
#clear screen
clear 

# installation of other components needed
printf "\n%s - Installing other necessary packages.... \n" "${NOTE}"

for PKG1 in foot swaybg swaylock-effects wofi wlogout mako xdg-desktop-portal-hyprland  grim slurp wl-clipboard polkit-gnome nwg-look-bin; do
    install_package "$PKG1" 2>&1 | tee -a $LOG
    done

for PKG2 in qt5ct btop jq gvfs gvfs-mtp ffmpegthumbs swww mousepad mpv python-requests pamixer brightnessctl viewnior pavucontrol playerctl mpv network-manager-applet cava; do
    install_package  "$PKG2" 2>&1 | tee -a $LOG
    done

for FONT in otf-font-awesome ttf-jetbrains-mono-nerd otf-font-awesome-4 ttf-fantasque-sans-mono; do
    install_package  "$FONT" 2>&1 | tee -a $LOG
    done
      
for GIT in waybar-hyprland-git; do
    install_package  "$GIT" 2>&1 | tee -a $LOG
    done
echo
    print_success " All necessary packages installed successfully."
sleep 2

#clear screen
clear


# additional packages (File Manager)
read -n1 -rep "${CAT} OPTIONAL - Would you like to install Thunar as file manager? (y/n)" inst4
echo

if [[ $inst4 =~ ^[Yy]$ ]]; then
  for THUNAR in thunar thunar-volman tumbler thunar-archive-plugin; do
    install_package "$THUNAR"
  done
    # check for existing config folders and backup 
    for DIR1 in Thunar xfce4; do 
        DIRPATH=~/.config/$DIR1
        if [ -d "$DIRPATH" ]; then 
            echo -e "${NOTE}  Config for $DIR1 located, backing up."
            mv $DIRPATH $DIRPATH-bac 2>&1 | tee -a $LOG
            echo -e "${NOTE}  Backed up $DIR1 to $DIRPATH-bac."
        fi
    done
    cp -r config/xfce4 ~/.config/ || { echo "Error: Failed to copy xfce4 config files."; exit 1; } 2>&1 | tee -a $LOG
    cp -r config/Thunar ~/.config/ || { echo "Error: Failed to copy Thunar config files."; exit 1; } 2>&1 | tee -a $LOG
else
  printf "${NOTE} Thunar will not be installed.\n"
fi

#clear screen
clear

# BLUETOOTH
read -n1 -rep "${CAT} OPTIONAL - Would you like to install Bluetooth packages? (y/n)" BLUETOOTH
if [[ $BLUETOOTH =~ ^[Yy]$ ]]; then
  printf "${NOTE} Installing Bluetooth Packages...\n"
  for BLUE in bluez bluez-utils blueman; do
    install_package "$BLUE" 2>&1 | tee -a $LOG
  done
  printf " Activating Bluetooth Services...\n"
  sudo systemctl enable --now bluetooth.service
else
  printf "${NOTE} No bluetooth packages installed..\n"
fi

#clear screen
clear

# SDDM
read -n1 -rep "${CAT} OPTIONAL - Would you like to install SDDM as Log-in Manager? (y/n)" LOGIN
if [[ $LOGIN =~ ^[Yy]$ ]]; then
  printf "${NOTE} Installing SDDM and Catppuccin theme ...\n"
  for SDM in sddm-git sddm-catppuccin-git; do
    install_package "$SDM" 2>&1 | tee -a $LOG
  done
  printf " Activating sddm service........\n"
  sudo systemctl enable sddm

  #set-up SDDM
    echo -e "${NOTE}  Setting up the login screen."
    SDIR1=/etc/sddm.conf.d
    if [ -d "$SDIR1" ]; then
        echo -e "${OK} - $SDIR1 found"
    else
        echo -e "$CAT - $SDIR1 NOT found, creating..."
        sudo mkdir $SDIR1 2>&1 | tee -a $LOG
    fi
    echo -e "[Theme]\nCurrent=catppuccin" | sudo tee -a /etc/sddm.conf.d/10-theme.conf 2>&1 | tee -a $LOG
    SDIR=/usr/share/wayland-sessions
    if [ -d "$SDIR" ]; then
        echo -e "${OK}  $SDIR found"
    else
        echo -e "$CAT  $SDIR NOT found, creating..."
        sudo mkdir $SDIR 2>&1 | tee -a $LOG
    fi

    sudo cp Misc/hyprland.desktop /usr/share/wayland-sessions/ 2>&1 | tee -a $LOG
else
  printf "${NOTE} SDDM will not be installed..\n"
fi
 
#clear screen
clear

### Install software for Asus ROG laptops ###
read -n1 -rep "${CAT} (OPTIONAL - ONLY for ROG Laptops) Would you like to install Asus ROG software support? (y/n)" ROG
if [[ $ROG =~ ^[Yy]$ ]]; then
    printf " Installing ASUS ROG packages...\n"
    for ASUS in asusctl supergfxctl rog-control-center; do
        install_package  "$ASUS" 2>&1 | tee -a $LOG
    printf " Activating ROG services...\n"
    sudo systemctl daemon-reload && sudo systemctl enable --now supergfxd 2>&1 | tee -a $LOG
    done
else
    printf "${NOTE} Asus ROG software support not installed..\n"
fi

#clear screen
clear

### Disable wifi powersave mode ###
read -n1 -rp "${CAT} Would you like to disable wifi powersave? (y/n) " WIFI
if [[ $WIFI =~ ^[Yy]$ ]]; then
    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    if [ -f "$LOC" ]; then
        printf "${OK} Wifi powersave is already disabled.\n"
    else
        printf "\n"
        printf "${NOTE} The following has been added to $LOC.\n"
        printf "[connection]\nwifi.powersave = 2" | sudo tee -a $LOC
        printf "\n"
        printf "${NOTE} Restarting NetworkManager service...\n"
        sudo systemctl restart NetworkManager 2>&1 | tee -a $LOG
        sleep 2        
    fi    
else
    printf "${NOTE} WIFI Powersave is not being disabled.\n"
fi


# XDPH
read -n1 -rep "${CAT} OPTIONAL - Would you like to install XDG-Portal-Hyprland? (y/n)" XDPH
if [[ $XDPH =~ ^[Yy]$ ]]; then
  printf "${NOTE} Installing XDPH...\n"
  for xdph in xdg-desktop-portal-hyprland; do
    install_package "$xdph" 2>&1 | tee -a $LOG
    # Clean out other portals
    printf "${NOTE} Clearing any other xdg-desktop-portal implementations...\n"
    # Check if packages are installed and uninstall if present
    if pacman -Qs xdg-desktop-portal-gnome > /dev/null ; then
        echo "Removing xdg-desktop-portal-gnome..."
        sudo pacman -R --noconfirm xdg-desktop-portal-gnome 2>&1 | tee -a $LOG
    fi
    if pacman -Qs xdg-desktop-portal-gtk > /dev/null ; then
        echo "Removing xdg-desktop-portal-gtk..."
        sudo pacman -R --noconfirm xdg-desktop-portal-gtk 2>&1 | tee -a $LOG
    fi
    if pacman -Qs xdg-desktop-portal-kde > /dev/null ; then
        echo "Removing xdg-desktop-portal-kde..."
        sudo pacman -R --noconfirm xdg-desktop-portal-kde 2>&1 | tee -a $LOG
    fi
    if pacman -Qs xdg-desktop-portal-wlr > /dev/null ; then
        echo "Removing xdg-desktop-portal-wlr..."
        sudo pacman -R --noconfirm xdg-desktop-portal-wlr 2>&1 | tee -a $LOG
    fi
    if pacman -Qs xdg-desktop-portal-lxqt > /dev/null ; then
        echo "Removing xdg-desktop-portal-lxqt..."
        sudo pacman -R --noconfirm xdg-desktop-portal-lxqt 2>&1 | tee -a $LOG
    fi
    print_success " All other XDG-DESKTOP-PORTAL implementations cleared."
    done
else
  printf "${NOTE} XDPH not installed..\n"
fi

#clear screen
clear

### Copy Config Files ###
set -e # Exit immediately if a command exits with a non-zero status.

read -n1 -rep "${CAT} Would you like to copy config and wallpaper files? (y,n)" CFG
if [[ $CFG =~ ^[Yy]$ ]]; then

# check for existing config folders and backup 
    for DIR in btop hypr foot mako swaylock waybar wlogout wofi 
    do 
        DIRPATH=~/.config/$DIR
        if [ -d "$DIRPATH" ]; then 
            echo -e "${NOTE} - Config for $DIR located, backing up."
            mv $DIRPATH $DIRPATH-bac 2>&1 | tee -a $LOG
            echo -e "${NOTE} - Backed up $DIR to $DIRPATH-bac."
        fi

    done

    printf " Copying config files...\n"
    mkdir -p ~/.config
    cp -r config/hypr ~/.config/ || { echo "Error: Failed to copy hypr config files."; exit 1; } 2>&1 | tee -a $LOG
    cp -r config/foot ~/.config/ || { echo "Error: Failed to copy foot config files."; exit 1; } 2>&1 | tee -a $LOG
    cp -r config/swaylock ~/.config/ || { echo "Error: Failed to copy swaylock config files."; exit 1; } 2>&1 | tee -a $LOG
    cp -r config/wlogout ~/.config/ || { echo "Error: Failed to copy wlogout config files."; exit 1; } 2>&1 | tee -a $LOG
    cp -r config/btop ~/.config/ || { echo "Error: Failed to copy btop config files."; exit 1; } 2>&1 | tee -a $LOG
    cp -r config/cava ~/.config/ || { echo "Error: Failed to copy cava config files."; exit 1; } 2>&1 | tee -a $LOG
    
    # Set some files as executable 
    chmod +x ~/.config/hypr/scripts/airplane-mode.sh 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/brightness 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/brightness-kbd 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/changeLayout 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/changeWallpaper 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/changeWallpaper2 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/fullmenu 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/glassmorphismToggle 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/lockscreen 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/menu 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/notifications 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/portal-arch-hyprland 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/screenshot 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/startup 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/statusbar 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/switch-lid.sh 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/touchpad.sh 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/volume 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/wallpaper-switcher 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/waybar-style-change 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/weather.sh 2>&1 | tee -a $LOG
    chmod +x ~/.config/hypr/scripts/wofi-beats 2>&1 | tee -a $LOG
else
   print_error " No Config files and wallpaper files copied"
fi

#clear screen
clear

### Script is done ###
printf "\n${OK} Installation Completed.\n"
printf "\n${NOTE} NOTICE TO NVIDIA! Kindly REBOOT YOUR SYSTEM"
sleep 2
printf "\n${NOTE} You can start Hyprland by typing Hyprland (note the capital H!).\n"
read -n1 -rep "${CAT} Would you like to start Hyprland now? (y,n)" HYP

if [[ $HYP =~ ^[Yy]$ ]]; then
    if command -v sddm >/dev/null; then
        sudo systemctl start sddm 2>&1 | tee -a $LOG
    fi
    
    if command -v Hyprland >/dev/null; then
        exec Hyprland
    else
        print_error "Hyprland not found. Please make sure Hyprland is installed by checking install.log.\n"
        exit 1
    fi
else
    exit
fi


